openapi: 3.0.0
info:
  version: '1.0'
  title: Murmurations Index API
  description: Draft version of the Index API for the Murmurations Protocol
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MurmurationsNetwork/IndexAPI/1.0
tags:
  - name: Node Endpoints
  - name: Aggregator Endpoints
paths:
  /nodes:
    post:
      tags:
        - Node Endpoints
      summary: Add a node to the index
      description: |
        A node adds its profile to the index by posting the location of its profile (`profile_url`). The profile must include a list (`linked_schemas`) of one or more schemas against which the profile must be validated.
        
        Each `linked_schemas` item is the name of a schema which can be found in the library using the following URL format: `{baseUrl}/schemas/{schema}.json`. For example:
        
        `https://library.site/schemas/example_schema-v1.json`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNodeRequest'
            example:
              profile_url: "https://node.site/optional-subdirectory/node-profile.json"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PostNodeResponse'
              example:
                data:
                  node_id: "a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38"
        400:
          description: The profile_url is missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing:
                  value:
                    message: "The profile_url parameter is missing."
                    status: 400
                invalid:
                  value:
                    message: "Invalid JSON body."
                    status: 400
        429:
          $ref: '#/components/responses/TooManyRequests'
        500: 
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - Aggregator Endpoints
      summary: Search for nodes
      description: |
        Aggregators can search for nodes based on any of the following parameters:
        
        - A specific schema (`schema`)
        - When the node was last validated by the index (`last_validated`)
        - A distance in kilometers (_"25km"_) or miles (_"15mi"_)) from a specific geolocation (`lat`, `lon`, `range`)
        - By city/town/village/etc, state/province/county/etc. and/or country. (`locality`, `region`, `country`)
        
        Aggregators will eventually be required to authenticate themselves with a JWT to access this endpoint.
      parameters:
        - $ref: '#/components/parameters/schema'
        - $ref: '#/components/parameters/last_validated'
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/lon'
        - $ref: '#/components/parameters/range'
        - $ref: '#/components/parameters/locality'
        - $ref: '#/components/parameters/region'
        - $ref: '#/components/parameters/country'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetNodesResponse'
              example:
                data:
                  - profile_url: "https://node.site/optional-subdirectory/node-profile.json"
                    last_validated: 1601979232403
                    geolocation:
                      lat: 51.509865
                      lon: -0.118092
                    location:
                      locality: London
                      region: Greater London
                      country: GB
                    linked_schemas:
                      - demo-v1
                      - demo-v2
        # TODO: Add non-generic error responses (e.g., `Invalid lat (must be number): {lat}`, etc.)
        400:
          $ref: '#/components/responses/BadRequest'
        # TODO: Add authentication/authorization errors when JWT is introduced
        # 401:
        #   $ref: '#/components/responses/Unauthorized'
        # 403:
        #   $ref: '#/components/responses/Forbidden'
        404:
          description: The requested resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "No items found matching given criteria."
                status: 404
        429:
          $ref: '#/components/responses/TooManyRequests'
        500: 
          $ref: '#/components/responses/ServerError'
      # TODO: Add JWT authentication
      # security:
      #   - jwt: []
  /nodes/{node_id}:
    get:
      tags:
        - Node Endpoints
      summary: Get a node's status from the index
      description: |
        A node can get an update as to the status of the node profile after it has been submitted to the index (i.e., when using `POST /nodes`).
        
        The record of a node in the index's database can be in one of five possible states: `received`, `validated`, `validation_failed`, `posted` or `post_failed`. The node will only be discoverable in the index when it has the status of `posted`.
      parameters:
        - $ref: '#/components/parameters/node_id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GetNodeStatusResponse'
              examples:
                received:
                  value:
                    data:
                      node_id: "a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38"
                      profile_url: "https://node.site/optional-subdirectory/node-profile.json"
                      status: "received"
                validated:
                  value:
                    data:
                      node_id: "a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38"
                      profile_url: "https://node.site/optional-subdirectory/node-profile.json"
                      status: "validated"
                      last_validated: 1601979232403
                posted:
                  value:
                    data:
                      node_id: "a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38"
                      profile_url: "https://node.site/optional-subdirectory/node-profile.json"
                      status: "posted"
                      last_validated: 1601979232403
                      profile_hash: "c24d14c2c75f55d334a7e0ccf4d35a063a2582a7abb91e16d326f6613b9602bf"
                validation_failed_no_profile_url:
                  value:
                    data:
                      node_id: "a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38"
                      profile_url: "https://node.site/optional-subdirectory/node-profile.json"
                      status: "validation_failed"
                      failure_reasons:
                        - "Could not read from profile_url: {profile_url}"
                validation_failed_with_schema:
                  value:
                    data:
                      node_id: "a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38"
                      profile_url: "https://node.site/optional-subdirectory/node-profile.json"
                      status: "validation_failed"
                      failure_reasons:
                        - "example_schema-v1.geolocation.lat: Invalid type. Expected: number, given: string"
                validation_failed_no_schema:
                  value:
                    data:
                      node_id: "a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38"
                      profile_url: "https://node.site/optional-subdirectory/node-profile.json"
                      status: "validation_failed"
                      failure_reasons:
                        - "Could not read from schema: {schema}"
                post_failed:
                  value:
                    data:
                      node_id: "a55964aeaae9625dc2b8dbdb1c4ce0ed1e658483f44cf2be1a6479fe5e144d38"
                      profile_url: "https://node.site/optional-subdirectory/node-profile.json"
                      status: "post_failed"
                      last_validated: 1601979232403
                      errors:
                        message: "Profile not posted to index. Will reattempt soon when service is fully operational."
        404:
          description: The node_id could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Could not find node_id: {node_id}"
                status: 404
        429:
          $ref: '#/components/responses/TooManyRequests'
        500: 
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Node Endpoints
      summary: Delete a node from the index
      description: |
        A node can delete its profile from the index at any time simply by removing the profile from its `profile_url` on its website and then sending this DELETE request to the index.
        
        The index will first confirm the profile is no longer available at the `profile_url` (node's website should return a `404 - Not Found` error) and then remove the profile from its records.
      parameters:
        - $ref: '#/components/parameters/node_id'
      responses:
        200:
          description: OK
        400:
          description: Profile not deleted from profile_url on node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Profile still exists for node_id: {node_id}"
                status: 400
        404:
          description: The node_id could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Could not find node_id: {node_id}"
                status: 404
        429:
          $ref: '#/components/responses/TooManyRequests'
        500: 
          $ref: '#/components/responses/ServerError'
 
components:
  schemas:
    PostNodeRequest:
      type: object
      required:
        - profile_url
      properties:
        profile_url:
          type: string
    PostNodeResponse:
      type: object
      required:
        - node_id
      properties:
        node_id:
          type: string
    GetNodesResponse:
      type: array
      items:
        type: object
        required:
          - profile_url
          - last_validated
          - linked_schemas
        properties:
          profile_url:
            type: string
          last_validated:
            type: number
          linked_schemas:
            type: array
            items:
              type: string
          geolocation:
            type: object
            properties:
              lat:
                type: number
              lon:
                type: number
          location:
            type: object
            properties:
              locality:
                type: string
              region:
                type: string
              country:
                type: string
    GetNodeStatusResponse:
      type: object
      required:
        - profile_url
        - node_id
        - status
      properties:
          profile_url:
            type: string
          node_id:
            type: string
          status:
            type: string
            enum:
              - received
              - validated
              - validation_failed
              - posted
              - post_failed
          last_validated:
            type: number
          profile_hash:
            type: string
          failure_reasons:
            type: array
            items:
              type: string
    Error:
      type: object
      required:
        - message
        - status
      properties:
        message:
          type: string
        status:
          type: integer
  parameters:
    node_id:
      name: node_id
      in: path
      description: The ID of the node
      required: true
      schema:
        type: string
    schema:
      name: schema
      in: query
      description: The name of the schema
      required: false
      schema:
        type: string
    last_validated:
      name: last_validated
      in: query
      description: Unix timestamp when node was last validated by index
      schema:
        type: integer
    lat:
      name: lat
      in: query
      description: geolocation lat coordinate
      schema:
        type: number
    lon:
      name: lon
      in: query
      description: geolocation lon coordinate
      schema:
        type: number
    range:
      name: range
      in: query
      description: distance from geo-coordinates ("10km" or "6mi")
      schema:
        type: string
    locality:
      name: locality
      in: query
      description: town, city, village, etc.
      schema:
        type: string
    region:
      name: region
      in: query
      description: state, province, county, etc.
      schema:
        type: string
    country:
      name: country
      in: query
      description: two-letter country code
      schema:
        type: string
  responses:
    BadRequest:
      description: The request is missing a required parameter.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: <named> parameter is missing.
            status: 400
    # TODO: Add authentication/authorization errors when JWT is introduced
    # Unauthorized:
    #   description: There was an issue with the authentication data for the request.
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/Error'
    #       example:
    #         message: Could not authenticate you.
    #         status: 401
    # Forbidden:
    #   description: User does not have permission to access the resource.
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/Error'
    #       example:
    #         message: Permission denied.
    #         status: 403
    TooManyRequests:
      description: The request limit for this resource has been reached for the current rate limit window.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Rate limit exceeded.
            status: 429
    ServerError:
      description: An unknown internal error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Internal server error triggered.
            status: 500
  # TODO: Add JWT authentication
  # securitySchemes:
  #   jwt:
  #     type: http
  #     scheme: bearer
  #     bearerFormat: JWT
